type BattleCompleted @entity(immutable: true) {
  id: Bytes!
  category: String! # string
  winner: Bytes! # address
  winningMemeId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  memeUpvoteCounts: [MemeUpvoteCount!]! @derivedFrom(field: "battleCompleted") # Reverse relationship
}

type WinnerMemeDetails @entity {
  id: Bytes! 
  creator: Bytes! 
  title: String!
  description: String!
  imageURI: String! 
  metadataURI: String! 
  upvotes: BigInt! 
  timestamp: String! 
}

type BattleStarted @entity(immutable: true) {
  id: Bytes!
  category: String! # string
  startTime: BigInt! # uint256
  endTime: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MemeSubmitted @entity(immutable: true) {
  id: Bytes!
  memeId: BigInt! # uint256
  creator: Bytes! # address
  category: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MemeUpvoted @entity(immutable: true) {
  id: Bytes!
  memeId: BigInt! # uint256
  voter: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MemeUpvoteCount @entity {
  id: ID!
  memeId: BigInt!
  upvoteAmount: BigInt!
  battleCompleted: BattleCompleted
  winner: Bytes!
  category: String!
  username: String!
}

type MemeInfoRequested @entity(immutable: true) {
  id: Bytes!
  memeId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}